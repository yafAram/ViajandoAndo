name: Backend CI (build, test & test-results - .NET 9)

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', 'global.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore all projects
        run: |
          echo "dotnet --info"
          dotnet --info
          dotnet restore

      - name: Build solution / projects
        run: |
          dotnet build --configuration Release --no-restore

      - name: Run unit tests and produce TRX results
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p test-results

          # Buscamos proyectos de test en dos sitios comunes:
          #  - ./tests/** (proyectos de tests centrales)
          #  - ./services/**/tests/** (tests dentro de cada servicio)
          mapfile -t test_projects < <(find ./tests ./services -type f \( -iname "*tests*.csproj" -o -iname "*unittests*.csproj" \) -print 2>/dev/null || true)

          if [ ${#test_projects[@]} -eq 0 ]; then
            echo "No se encontraron proyectos de test."
            exit 0
          fi

          for proj in "${test_projects[@]}"; do
            echo "-------------------------------------------------"
            echo "Ejecutando tests en: $proj"
            proj_name=$(basename "$proj" | sed 's/\.csproj$//i')
            timestamp=$(date +%s)
            # Ejecutar y generar TRX en la carpeta test-results
            dotnet test "$proj" \
              --configuration Release \
              --no-build \
              --logger "trx;LogFileName=${proj_name}-${timestamp}.trx" \
              --results-directory "test-results"
            echo "Resultados guardados en test-results/${proj_name}-${timestamp}.trx"
            echo "-------------------------------------------------"
          done

      - name: List test-results folder
        run: |
          echo "Contenido de test-results:"
          ls -la test-results || true

      - name: Upload test results artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: test-results/**

      # (Opcional) - si en el futuro quieres publicar artefactos (dotnet publish),
      # agrega un job separado con condiciones y secrets para deploy.
