name: Backend CI (build & test - .NET 9)

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 9
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', 'global.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore all (solution / projects)
        run: |
          dotnet --info
          dotnet restore

      - name: Build all projects
        run: |
          dotnet build --configuration Release --no-restore

      - name: Run unit tests and generate TRX results
        shell: bash
        run: |
          set -euo pipefail

          # carpeta donde guardaremos resultados
          mkdir -p test-results

          # Buscar proyectos de test (case-insensitive)
          mapfile -t test_projects < <(find . -type f \( -iname "*tests*.csproj" -o -iname "*unittests*.csproj" \) -print)

          if [ ${#test_projects[@]} -eq 0 ]; then
            echo "No se encontraron proyectos de test."
            exit 0
          fi

          for proj in "${test_projects[@]}"; do
            echo "-------------------------------------------------"
            echo "Ejecutando tests en: $proj"

            # generar un nombre legible para el archivo (sin path ni extension)
            proj_name=$(basename "$proj" | sed 's/\.csproj$//i')
            timestamp=$(date +%s)
            trx_file="test-results/${proj_name}-${timestamp}.trx"

            # Ejecutar dotnet test y generar TRX
            # --logger "trx;LogFileName=..." crea el archivo TRX en el working directory por defecto,
            # por eso redirigimos con --results-directory para garantizar la ubicaciÃ³n
            dotnet test "$proj" \
              --configuration Release \
              --no-build \
              --logger "trx;LogFileName=${proj_name}-${timestamp}.trx" \
              --results-directory "test-results"

            echo "Resultados guardados en: ${trx_file}"
            echo "-------------------------------------------------"
          done

      - name: List test-results folder
        run: |
          echo "Contenido de test-results:"
          ls -la test-results || true

      - name: Upload test results artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_id }}
          path: test-results/**
